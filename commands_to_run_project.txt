Here's a step-by-step setup guide tailored to your project structure:

Local Development Setup
1. Clone Repository:
		   git clone <your-repo-url>
		   cd your-project
2. Backend Setup (FastAPI):
		   # Create and activate virtual environment
		   python -m venv .venv

		   # Windows
	     	   .\.venv\Scripts\activate

		  # macOS/Linux
		  source .venv/bin/activate

		  # Install dependencies
		  cd backend
		  pip install -r requirements.txt

3. Frontend Setup (Remix):
		  cd frontend
		  npm install
		  npm run build

4. Run Services
Open separate terminals for each:
	Terminal 1 - FastAPI Backend

		 cd backend
		 uvicorn main:app --reload --port 8000
	Terminal 2 - Remix Frontend
	
		cd frontend
		npm run dev


!Docker Setup:
	# From project root
	docker compose -f compose.yaml up --build

!Key Commands Cheatsheet
Task				Command
Start Backend		uvicorn main:app --reload
Start Frontend		npm run dev
Build Production	npm run build && docker compose up
Clean Docker		docker compose down -v


!Important Notes
Add .env file at project root with:

env
Copy
GROQ_API_KEY=your_key
AZURE_API_KEY=your_key
For Windows users: Replace file paths with \\ instead of /

Nginx config should match your route handling from Remix routes

This setup maintains your existing structure while enabling both local and containerized development.